#cloud-config

---
write-files:
  - path: /etc/conf.d/demo
    permissions: '0644'
    content: |
      OST_CONTROLLER_IP="10.142.0.2"
  - path: /etc/conf.d/kubectl
    permissions: '0644'
    content: |
      apiVersion: v1
      clusters:
      - cluster:
          server: http://10.142.0.3:8080
        name: default-cluster
      contexts:
      - context:
          cluster: default-cluster
          user: default-admin
        name: default-system
      current-context: default-system
      kind: Config
      preferences: {}
      users: []
  - path: /opt/bin/wupiao
    permissions: '0755'
    content: |
      #!/bin/bash
      # [w]ait [u]ntil [p]ort [i]s [a]ctually [o]pen
      [ -n "$1" ] && \
        until curl -o /dev/null -sIf http://${1}; do \
          sleep 1 && echo .;
        done;
      exit $?
  - path: /opt/bin/kubectl
    permissions: '0755'
    content: |
      #!/bin/bash
      if [[ ! -f /opt/bin/_kubectl ]]; then
          curl http://storage.googleapis.com/kubernetes-release/release/v1.3.0/bin/linux/amd64/kubectl 2> /dev/null > /tmp/_kubectl
          chmod +x /tmp/_kubectl
          sudo mv /tmp/_kubectl /opt/bin/_kubectl
      fi

      if [[ ! -f ${HOME}/.kube/config ]]; then
          mkdir -p "${HOME}/.kube"
          cp /etc/conf.d/kubectl "${HOME}/.kube/config"
      fi
      /opt/bin/_kubectl $@
  - path: /opt/bin/midonet-cli
    permissions: '0755'
    content: |
      #!/bin/sh
      #
      # Adapter for using midonet-cli from midonet/utils
      #
      # Use the IP of the ost-controller
      source /etc/conf.d/demo

      docker run --rm \
        -e CLUSTER_URL="http://${OST_CONTROLLER_IP}:8181/midonet-api" \
        -e PASSWORD=pass \
        midonet/utils cli "$@"
coreos:
  fleet:
    metadata: "role=master"
  units:
    - name: google-accounts-manager.service
      command: start
    - name: demo-prepare-cli-tools.service
      command: start
      content: |
        [Unit]
        Description=Prepares midonet-cli
        Requires=docker.service
        After=docker.service

        [Service]
        Type=oneshot
        ExecStart=/usr/bin/docker pull midonet/utils
    - name: etcd3.service
      command: start
      content: |
        [Unit]
        Description=Etcd3
        Documentation=https://github.com/coreos/etcd
        Requires=docker.service
        After=docker.service

        [Service]
        ExecStartPre=-/usr/bin/docker kill %n
        ExecStartPre=-/usr/bin/docker rm %n
        ExecStartPre=/usr/bin/docker pull quay.io/coreos/etcd:v3.0.1
        ExecStart=/usr/bin/docker run --name %n \
          --net host \
          --volume=/var/etcd:/var/etcd \
          quay.io/coreos/etcd:v3.0.1 \
          /usr/local/bin/etcd \
            --name k8s-controller \
            --data-dir /var/etcd/data \
            --initial-advertise-peer-urls http://$private_ipv4:2380 \
            --listen-peer-urls http://0.0.0.0:2380 \
            --listen-client-urls http://0.0.0.0:2379 \
            --advertise-client-urls http://$private_ipv4:2379 \
            --initial-cluster-token etcd-cluster-1 \
            --initial-cluster k8s-controller=http://$private_ipv4:2380,k8s-worker1=http://10.142.0.4:2380,k8s-worker2=http://10.142.0.5:2380 \
            --initial-cluster-state new
        ExecStop=/usr/bin/docker kill %n
        ExecStopPost=/usr/bin/docker rm -f %n
        Restart=always
        RestartSec=10
    - name: fleet.service
      command: start
    - name: docker.service
      command: start
    - name: kubernetes-setup-files.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes setup config files
        Documentation=https://github.com/kubernetes/kubernetes
        Requires=docker.service
        After=docker.service

        [Service]
        ExecStartPre=-/usr/bin/docker kill %n
        ExecStartPre=-/usr/bin/docker rm %n
        ExecStartPre=/usr/bin/docker pull gcr.io/google_containers/hyperkube-amd64:v1.3.0
        ExecStart=/usr/bin/docker run --name %n --net=host \
          --volume=/data:/data \
          gcr.io/google_containers/hyperkube-amd64:v1.3.0 \
            /setup-files.sh \
            IP:$private_ipv4,DNS:kubernetes,DNS:kubernetes.default,DNS:kubernetes.default.svc,DNS:kubernetes.default.svc.cluster.local
        ExecStop=/usr/bin/docker kill %n
        ExecStopPost=/usr/bin/docker rm -f %n
    - name: kube-apiserver.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes API Server
        Documentation=https://github.com/kubernetes/kubernetes
        Requires=etcd3.service kubernetes-setup-files.service docker.service
        After=etcd3.service kubernetes-setup-files.service docker.service

        [Service]
        ExecStartPre=/opt/bin/wupiao 127.0.0.1:2379/v2/machines
        ExecStartPre=-/usr/bin/docker kill %n
        ExecStartPre=-/usr/bin/docker rm %n
        ExecStartPre=/usr/bin/docker pull gcr.io/google_containers/hyperkube-amd64:v1.3.0
        ExecStart=/usr/bin/docker run --name %n --net=host \
          --volume=/data:/srv/kubernetes \
          gcr.io/google_containers/hyperkube-amd64:v1.3.0 \
          /hyperkube apiserver \
            --service-cluster-ip-range=10.0.0.1/24 \
            --insecure-bind-address=0.0.0.0 \
            --insecure-port=8080 \
            --etcd-servers=http://127.0.0.1:2379 \
            --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota \
            --client-ca-file=/srv/kubernetes/ca.crt \
            --basic-auth-file=/srv/kubernetes/basic_auth.csv \
            --min-request-timeout=300 \
            --tls-cert-file=/srv/kubernetes/server.cert \
            --tls-private-key-file=/srv/kubernetes/server.key \
            --token-auth-file=/srv/kubernetes/known_tokens.csv \
            --allow-privileged=true \
            --v=2 \
            --logtostderr=true
        ExecStop=/usr/bin/docker kill %n
        ExecStopPost=/usr/bin/docker rm -f %n
        Restart=always
        RestartSec=10
    - name: kube-controller-manager.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Controller Manager
        Documentation=https://github.com/kubernetes/kubernetes
        Requires=kube-apiserver.service docker.service
        After=kube-apiserver.service docker.service

        [Service]
        ExecStartPre=-/usr/bin/docker kill %n
        ExecStartPre=-/usr/bin/docker rm %n
        ExecStartPre=/usr/bin/docker pull gcr.io/google_containers/hyperkube-amd64:v1.3.0
        ExecStart=/usr/bin/docker run --name %n --net=host \
          --volume=/data:/srv/kubernetes \
          gcr.io/google_containers/hyperkube-amd64:v1.3.0 \
          /hyperkube controller-manager \
            --master=127.0.0.1:8080 \
            --service-account-private-key-file=/srv/kubernetes/server.key \
            --root-ca-file=/srv/kubernetes/ca.crt \
            --min-resync-period=3m \
            --v=2 \
            --logtostderr=true
        ExecStop=/usr/bin/docker kill %n
        ExecStopPost=/usr/bin/docker rm -f %n
        Restart=always
        RestartSec=10
    - name: kube-scheduler.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Scheduler
        Documentation=https://github.com/kubernetes/kubernetes
        Requires=kube-apiserver.service docker.service
        After=kube-apiserver.service docker.service

        [Service]
        ExecStartPre=-/usr/bin/docker kill %n
        ExecStartPre=-/usr/bin/docker rm %n
        ExecStartPre=/usr/bin/docker pull gcr.io/google_containers/hyperkube-amd64:v1.3.0
        ExecStart=/usr/bin/docker run --name %n --net=host \
          gcr.io/google_containers/hyperkube-amd64:v1.3.0 \
          /hyperkube scheduler \
            --master=127.0.0.1:8080 \
            --v=2 \
            --logtostderr=true
        ExecStop=/usr/bin/docker kill %n
        ExecStopPost=/usr/bin/docker rm -f %n
        Restart=always
        RestartSec=10
    - name: kuryr-watcher.service
      command: start
      content: |
        [Unit]
        Description=Kuryr Kubernetes API watcher
        Documentation=https://github.com/midonet/kuryr/tree/k8s
        Requires=kube-apiserver.service docker.service
        After=kube-apiserver.service docker.service

        [Service]
        EnvironmentFile=/etc/conf.d/demo
        ExecStartPre=/opt/bin/wupiao 127.0.0.1:8080
        ExecStartPre=-/usr/bin/docker kill %n
        ExecStartPre=-/usr/bin/docker rm %n
        ExecStart=/usr/bin/docker run --name %n \
          -e SERVICE_CLUSTER_IP_RANGE=10.0.0.0/24 \
          -e SERVICE_USER=admin \
          -e SERVICE_TENANT_NAME=admin \
          -e SERVICE_PASSWORD=pass \
          -e IDENTITY_URL=http://${OST_CONTROLLER_IP}:35357/v2.0 \
          -e OS_URL=http://${OST_CONTROLLER_IP}:9696 \
          -e K8S_API=http://$private_ipv4:8080 \
          -v /var/log/kuryr:/var/log/kuryr \
         midonet/raven
        ExecStop=/usr/bin/docker kill %n
        ExecStopPost=/usr/bin/docker rm -f %n
        Restart=always
        RestartSec=3
